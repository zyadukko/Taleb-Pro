<!DOCTYPE html>
<html lang="ar" dir="rtl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Taleb Pro</title>
    <link href='/style.css' rel='stylesheet'>
</head>

<body data-theme="dark">
    <div class="dashboard-container">
        <header>
            <h1>مشروع تخرج</h1>
            <div class="header-icons">
                <div class="settings-btn">
                    <button class="settings-button">&#x22EE;</button>
                    <div id="settings-menu" class="settings-menu">
                        <label for="language-select" data-translate="changeLanguage">Change Language</label>
                        <select id="language-select">
                            <option value="en">English</option>
                            <option value="ar">العربية</option>
                            <option value="zh">中文</option>
                        </select>
                        <label for="theme-select" data-translate="changeTheme">Change Theme</label>
                        <select id="theme-select">
                            <option value="light">Light</option>
                            <option value="dark">Dark</option>
                            <option value="auto">Auto</option>
                        </select>
                        <button onclick="showSupport()" data-translate="supportHelp">Support and Help</button>
                    </div>
                </div>
                <button class="menu-icon">&#x22EE;</button>
            </div>
        </header>

        <main class="dashboard">
            <section id="tasks" class="panel" data-translate="tasks">
                <h2>إدارة المهام</h2>
                <!-- Task management content here -->
            </section>

            <section id="notes" class="panel" data-translate="notes">
                <h2>الملاحظات السريعة</h2>
                <!-- Quick notes content here -->
            </section>

            <section id="timer" class="panel" data-translate="timer">
                <h2>المؤقت والمنبه</h2>
                <div id="timer-display">25:00</div>
                <button id="start-timer">Start</button>
                <button id="pause-timer">Pause</button>
                <button id="reset-timer">Reset</button>
                <!-- Timer and alarm content here -->
            </section>

            <section id="reminders" class="panel" data-translate="reminders">
                <h2>التذكيرات</h2>
                <!-- Reminders content here -->
            </section>

            <section id="progress" class="panel" data-translate="progress">
                <h2>عرض التقدم</h2>
                <svg width="100" height="100">
                    <circle cx="50" cy="50" r="45" stroke="#bb86fc" stroke-width="10" fill="none" id="progress-circle" style="stroke-dasharray: 282.743; stroke-dashoffset: 70.686;"></circle>
                    <text id="progress-value" x="50" y="50" text-anchor="middle" dy=".3em" style="font-size: 16px; fill: white;">75%</text>
                </svg>
                <!-- Progress display content here -->
            </section>
        </main>
    </div>

    <script src="/main.js"></script>
</body>

</html>
function main() {
    // Language Switching
    const languageSelect = document.getElementById('language-select');
    const translations = {
        'ar': {
            'tasks': 'إدارة المهام',
            'notes': 'الملاحظات السريعة',
            'timer': 'المؤقت والمنبه',
            'reminders': 'التذكيرات',
            'settings': 'الإعدادات',
            
            'progress': 'عرض التقدم',
            'changeLanguage': 'تغيير اللغة',
            'changeTheme': 'تغيير الثيم',
            'supportHelp': 'الدعم والمساعدة',
        },
        'en': {
            'tasks': 'Task Management',
            'notes': 'Quick Notes',
            'timer': 'Timer & Alarm',
            'reminders': 'Reminders',
            'settings': 'Settings',
            
            'progress': 'Progress Display',
            'changeLanguage': 'Change Language',
            'changeTheme': 'Change Theme',
            'supportHelp': 'Support & Help',
        },
        'zh': {
            'tasks': '任务管理',
            'notes': '快速笔记',
            'timer': '定时器和闹钟',
            'reminders': '提醒事项',
            'settings': '设置',
            
            'progress': '进度显示',
            'changeLanguage': '更改语言',
            'changeTheme': '更改主题',
            'supportHelp': '支持与帮助',
        },
    };

    function updateText(lang) {
        document.querySelectorAll('[data-translate]').forEach(element => {
            const key = element.dataset.translate;
            element.textContent = translations[lang][key];
        });
        document.documentElement.lang = lang;
        document.documentElement.dir = (lang === 'ar') ? 'rtl' : 'ltr';
    }

    if (languageSelect) {
        languageSelect.addEventListener('change', (event) => {
            updateText(event.target.value);
            localStorage.setItem('language', event.target.value);
        });

        const savedLanguage = localStorage.getItem('language') || 'ar';
        languageSelect.value = savedLanguage;
        updateText(savedLanguage);
    }

    // Theme Switching
    const themeSelect = document.getElementById('theme-select');

    function updateTheme(theme) {
        document.body.className = theme;
        localStorage.setItem('theme', theme);
    }

    if (themeSelect) {
        themeSelect.addEventListener('change', (event) => {
            const theme = event.target.value;
            if (theme === 'auto') {
                const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
                updateTheme(systemTheme);
            } else {
                updateTheme(theme);
            }
        });

        const savedTheme = localStorage.getItem('theme') || 'auto';
        themeSelect.value = savedTheme;
        if (savedTheme === 'auto') {
            const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
            updateTheme(systemTheme);
        } else {
            updateTheme(savedTheme);
        }
    }

    // Pomodoro Timer
    const timerDisplay = document.getElementById('timer-display');
    const startButton = document.getElementById('start-timer');
    const pauseButton = document.getElementById('pause-timer');
    const resetButton = document.getElementById('reset-timer');

    let workTime = 25 * 60;
    let breakTime = 5 * 60;
    let currentTime = workTime;
    let isBreak = false;
    let timerInterval;
    let isRunning = false;

    function formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    }

    function updateTimerDisplay() {
        timerDisplay.textContent = formatTime(currentTime);
    }

    function startTimer() {
        if (!isRunning) {
            isRunning = true;
            timerInterval = setInterval(() => {
                currentTime--;
                updateTimerDisplay();
                if (currentTime <= 0) {
                    clearInterval(timerInterval);
                    isRunning = false;
                    if (isBreak) {
                        currentTime = workTime;
                        isBreak = false;
                    } else {
                        currentTime = breakTime;
                        isBreak = true;
                    } 
                    updateTimerDisplay();
                }
            }, 1000);
        }
    }

    function pauseTimer() {
        clearInterval(timerInterval);
        isRunning = false;
    }

    function resetTimer() {
        clearInterval(timerInterval);
        isRunning = false;
        currentTime = workTime;
        isBreak = false;
        updateTimerDisplay();
    }

    if (startButton && pauseButton && resetButton) {
        startButton.addEventListener('click', startTimer);
        pauseButton.addEventListener('click', pauseTimer);
        resetButton.addEventListener('click', resetTimer);

        updateTimerDisplay();
    }

    // Progress Circle (Example - Needs Integration with Task Management)
    const progressCircle = document.getElementById('progress-circle');
    const progressValue = document.getElementById('progress-value');

    function updateProgress(percentage) {
        const circumference = 2 * Math.PI * 45;
        const offset = circumference - (percentage / 100) * circumference;
        if (progressCircle) {
            progressCircle.style.strokeDashoffset = offset;
        }
        if (progressValue) {
            progressValue.textContent = `${Math.round(percentage)}%`;
        }
    }

    // Example: Set initial progress to 75%
    updateProgress(75);

    // Animations (Example - Add more as needed)
    const sections = document.querySelectorAll('section');

    sections.forEach(section => {
        section.style.opacity = 0;
        section.style.transform = 'translateY(20px)';
        section.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    });

    setTimeout(() => {
        sections.forEach(section => {
            section.style.opacity = 1;
            section.style.transform = 'translateY(0)';
        });
    }, 100);
    // Settings button
    const settingsMenu = document.getElementById("settings-menu");
    const settingsButton = document.querySelector(".settings-button");

    if (settingsButton && settingsMenu) {
        settingsButton.addEventListener("click", function () {
            settingsMenu.classList.toggle("show");
        });

        // Close the menu when clicking outside
        window.addEventListener("click", function (event) {
            if (!event.target.matches(".settings-button") && !settingsMenu.contains(event.target)) {
                settingsMenu.classList.remove("show");
            }
        });
    }
    
    // Settings menu functions
    function toggleSettings() {
        settingsMenu.classList.toggle("show");
    }

    function changeLanguage(lang) {
        updateText(lang);
        localStorage.setItem('language', lang);
        languageSelect.value = lang;
    }
    function showSupport() {
        alert("For support, contact us at support@example.com");
    }

}

main();
/* Global Styles */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        line-height: 1.6;
    margin: 0;
    padding: 0;
    background-color: #121212; /* Dark background */
    color: #e0e0e0; /* Light text */
    direction: rtl; /* Right-to-left */
}

h1, h2, h3 {
    color: #ffffff;
}

a {
    color: #bb86fc; /* Primary color */
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
}


/* Dashboard Container */
.dashboard-container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

/* Header */
header {
    background-color: #1e1e1e;
    padding: 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

header h1 {
    margin: 0;
}

.header-icons {
    display: flex;
    align-items: center;
}

.menu-icon {
    background: none;
    border: none;
    color: #fff;
    font-size: 1.5rem;
    cursor: pointer;
    margin-left: 1rem;
}

/* Settings Button */
.settings-btn {
    font-size: 1.5rem;
    color: #ffffff;
    cursor: pointer;
    margin-left: 1rem;
}

.settings-menu {
    position: absolute;
    top: 4rem;
    left: 1rem; /* Adjusted for RTL */
    background-color: #252525;
    border: 1px solid #333;
    border-radius: 5px;
    padding: 1rem;
    display: none;
    z-index: 101;
}

.settings-menu.show {
    display: block;
}

.settings-menu ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.settings-menu li {
    padding: 0.5rem 0;
}

.settings-menu a {
    color: #e0e0e0;
    transition: color 0.3s ease;
}

    .settings-menu a:hover {
        color: #bb86fc;
    }

/* Dashboard Layout */
.dashboard {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    padding: 1rem;
    flex: 1;
}

/* Panel Styles */
.panel {
    background-color: #1e1e1e;
    padding: 1.5rem;
    margin: 1rem;
    background-color: #1e1e1e;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

/* Section Titles */
.panel h2 {
    margin-bottom: 1rem;
        color: #ffffff;
    border-bottom: 2px solid #bb86fc;
    padding-bottom: 0.5rem;
}
    color: #ffffff;
    border-bottom: 2px solid #bb86fc;
    padding-bottom: 0.5rem;
}

/* Tasks Section */
#tasks ul {
    list-style: none;
    padding: 0;
}

#tasks li {
    padding: 0.5rem 0;
    border-bottom: 1px solid #333;
}

/* Notes Section */
#notes textarea {
    width: 100%;
    min-height: 100px;
    padding: 0.5rem;
    background-color: #252525;
    border: 1px solid #333;
    border-radius: 5px;
    color: #e0e0e0;
}

/* Timer Section */
#timer {
    text-align: center;
}

#timer #timer-display {
    font-size: 3rem;
    margin-bottom: 1rem;
}

#timer button {
    padding: 0.5rem 1rem;
    background-color: #bb86fc;
    border: none;
    border-radius: 5px;
    color: #121212;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

#timer button:hover {
    background-color: #ffffff;
    color: #121212;
}
